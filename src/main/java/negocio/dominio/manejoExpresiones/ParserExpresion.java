/* ParserExpresion.java */
/* Generated By:JavaCC: Do not edit this line. ParserExpresion.java */
package negocio.dominio.manejoExpresiones;

import java.io.ByteArrayInputStream;
import java.io.InputStream;

import negocio.dominio.manejoExpresiones.arbol.Constante;
import negocio.dominio.manejoExpresiones.arbol.Expresion;
import negocio.dominio.manejoExpresiones.arbol.Incognita;
import negocio.dominio.manejoExpresiones.arbol.operaciones.Division;
import negocio.dominio.manejoExpresiones.arbol.operaciones.Multiplicacion;
import negocio.dominio.manejoExpresiones.arbol.operaciones.Resta;
import negocio.dominio.manejoExpresiones.arbol.operaciones.Suma;
import negocio.dominio.manejoExpresiones.gramatica.ExpresionInvalidaException;
import negocio.dominio.manejoExpresiones.gramatica.ParserExpresionConstants;
import negocio.dominio.manejoExpresiones.gramatica.ParserExpresionTokenManager;
import negocio.dominio.manejoExpresiones.gramatica.SimpleCharStream;
import negocio.dominio.manejoExpresiones.gramatica.Token;
import negocio.dominio.manejoExpresiones.gramatica.TokenMgrError;


public class ParserExpresion implements ParserExpresionConstants {	
	
	public Expresion parsear(String expresion) throws ExpresionInvalidaException {
		
		try 
		{
			InputStream stream = new ByteArrayInputStream(expresion.getBytes());
			jj_input_stream = new SimpleCharStream(stream, null, 1, 1);
		} 
		catch (java.io.UnsupportedEncodingException e) 
		{
			throw new RuntimeException(e);
		}
		
		token_source = new ParserExpresionTokenManager(jj_input_stream);
		token = new Token();
		jj_ntk = -1;
		
		Expresion a;
		switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
		
		case CONSTANTE:
		case INCOGNITA:
		case 11: {
			a = expresion();
			jj_consume_token(EOF);

			return a;
		}
		case EOL: {
			jj_consume_token(EOL);
			throw new ExpresionInvalidaException();
		}
		case 0: {
			jj_consume_token(0);
			throw new ExpresionInvalidaException();
		}
		default:
			jj_consume_token(-1);
			throw new ExpresionInvalidaException();
		}
	}

	final private Expresion expresion() throws ExpresionInvalidaException {
		Expresion a;
		Expresion b;
		
		a = termino();
		label_1: while (true) 
		{
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
			case 7:
			case 8: {
				break;
			}
			default:
				break label_1;
			}
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
			case 7: {
				jj_consume_token(7);
				b = termino();
				a = new Suma(a, b);
				break;
			}
			case 8: {
				jj_consume_token(8);
				b = termino();
				a = new Resta(a, b);
				break;
			}
			default:
				jj_consume_token(-1);
				throw new ExpresionInvalidaException();
			}
		}
		return a;
	}

	final private Expresion termino() throws ExpresionInvalidaException {
		Expresion a;
		Expresion b;
		a = elemento();
		label_2: while (true) {
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
			case 9:
			case 10: {
				break;
			}
			default:
				break label_2;
			}
			switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
			case 9: {
				jj_consume_token(9);
				b = elemento();
				a = new Multiplicacion(a, b);
				break;
			}
			case 10: {
				jj_consume_token(10);
				b = elemento();
				a = new Division(a, b);
				break;
			}
			default:
				jj_consume_token(-1);
				throw new ExpresionInvalidaException();
			}
		}
		return a;
	}

	final private Expresion elemento() throws ExpresionInvalidaException {
		Expresion a;
		switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
		case CONSTANTE: {
			jj_consume_token(CONSTANTE);
			return new Constante(Double.valueOf(token.image));
		}
		case INCOGNITA: {
			jj_consume_token(INCOGNITA);
			return new Incognita(token.image);
		}
		case 11: {
			jj_consume_token(11);
			a = expresion();
			jj_consume_token(12);

			return a;
		}
		default:
			jj_consume_token(-1);
			throw new ExpresionInvalidaException();
		}
	}

	/** Generated Token Manager. */
	private ParserExpresionTokenManager token_source;
	SimpleCharStream jj_input_stream;
	/** Current token. */
	private Token token;
	/** Next token. */
	private Token jj_nt;
	private int jj_ntk;

	private Token jj_consume_token(int kind) throws ExpresionInvalidaException {
		Token oldToken;
		if ((oldToken = token).next != null)
			token = token.next;
		else
			token = token.next = token_source.getNextToken();
		jj_ntk = -1;
		if (token.kind == kind) {
			return token;
		}
		token = oldToken;
		throw generateParseException();
	}

	private int jj_ntk_f() throws TokenMgrError {
		if ((jj_nt = token.next) == null)
			return (jj_ntk = (token.next = token_source.getNextToken()).kind);
		else
			return (jj_ntk = jj_nt.kind);
	}

	/** Generate ParseException. */
	private ExpresionInvalidaException generateParseException() {
		Token errortok = token.next;
		int column = errortok.beginColumn;
		String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
		return new ExpresionInvalidaException("Se encontro un error en la columna " + column + ".  Token: " + mess);
	}
}
