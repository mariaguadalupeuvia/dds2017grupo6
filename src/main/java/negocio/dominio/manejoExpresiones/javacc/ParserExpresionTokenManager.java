/* ParserExpresionTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserExpresionTokenManager.java */
package negocio.dominio.manejoExpresiones.gramatica;

/** Token Manager. */
public class ParserExpresionTokenManager implements ParserExpresionConstants {

	private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 10:
			return jjStopAtPos(0, 4);
		case 40:
			return jjStopAtPos(0, 11);
		case 41:
			return jjStopAtPos(0, 12);
		case 42:
			return jjStopAtPos(0, 9);
		case 43:
			return jjStopAtPos(0, 7);
		case 45:
			return jjStopAtPos(0, 8);
		case 47:
			return jjStopAtPos(0, 10);
		default:
			return jjMoveNfa_0(3, 0);
		}
	}

	private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 5;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 3:
					case 0:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 5)
							kind = 5; {
						jjCheckNAddTwoStates(0, 1);
					}
						break;
					case 1:
						if (curChar == 46) {
							jjCheckNAdd(2);
						}
						break;
					case 2:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 5)
							kind = 5; {
						jjCheckNAdd(2);
					}
						break;
					case 4:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 6)
							kind = 6;
						jjstateSet[jjnewStateCnt++] = 4;
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 3:
					case 4:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 6)
							kind = 6; {
						jjCheckNAdd(4);
					}
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				do {
					switch (jjstateSet[--i]) {
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = {};

	/** Token literal values. */
	private static final String[] jjstrLiteralImages = { "", null, null, null, "\12", null, null, "\53", "\55", "\52",
			"\57", "\50", "\51", };

	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	/** Get the next Token. 
	 * @throws TokenMgrError */
	public Token getNextToken() throws TokenMgrError {
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (Exception e) {
				jjmatchedKind = 0;
				jjmatchedPos = -1;
				matchedToken = jjFillToken();
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100002200L & (1L << curChar)) != 0L)
					curChar = input_stream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					return matchedToken;
				} else {
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
					TokenMgrError.LEXICAL_ERROR);
		}
	}

	private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	/** Constructor. */
	public ParserExpresionTokenManager(SimpleCharStream stream) {

		if (SimpleCharStream.staticFlag)
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

		input_stream = stream;
	}

	/** Reinitialise parser. */
	private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 5; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Lexer state names. */
	static final long[] jjtoToken = { 0x1ff1L, };
	static final long[] jjtoSkip = { 0xeL, };
	protected SimpleCharStream input_stream;

	private final int[] jjrounds = new int[5];
	private final int[] jjstateSet = new int[2 * 5];

	protected int curChar;
}
